# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from pickletools import uint8
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from cv2 import waitKey
import numpy as np
import cv2

class Ui_MainWindow(object):
    ImgPath1 = ''
    ImgPath2 = ''
    # BlendImg = np.zeros(2,2,2)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.loadButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.loadButton1.setGeometry(QtCore.QRect(50, 130, 75, 23))
        self.loadButton1.setObjectName("loadButton1")
        self.loadButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.loadButton2.setGeometry(QtCore.QRect(50, 200, 75, 23))
        self.loadButton2.setObjectName("loadButton2")
        self.colorSepBtn = QtWidgets.QPushButton(self.centralwidget)
        self.colorSepBtn.setGeometry(QtCore.QRect(230, 100, 171, 31))
        self.colorSepBtn.setObjectName("colorSepBtn")
        self.colorTranBtn = QtWidgets.QPushButton(self.centralwidget)
        self.colorTranBtn.setGeometry(QtCore.QRect(230, 150, 171, 31))
        self.colorTranBtn.setObjectName("colorTranBtn")
        self.colorDetBtn = QtWidgets.QPushButton(self.centralwidget)
        self.colorDetBtn.setGeometry(QtCore.QRect(230, 200, 171, 31))
        self.colorDetBtn.setObjectName("colorDetBtn")
        self.blendBtn = QtWidgets.QPushButton(self.centralwidget)
        self.blendBtn.setGeometry(QtCore.QRect(230, 250, 171, 31))
        self.blendBtn.setObjectName("blendBtn")
        self.gaussBlur = QtWidgets.QPushButton(self.centralwidget)
        self.gaussBlur.setGeometry(QtCore.QRect(500, 100, 131, 31))
        self.gaussBlur.setObjectName("gaussBlur")
        self.bilFilBtn = QtWidgets.QPushButton(self.centralwidget)
        self.bilFilBtn.setGeometry(QtCore.QRect(500, 170, 131, 31))
        self.bilFilBtn.setObjectName("bilFilBtn")
        self.medFilBtn = QtWidgets.QPushButton(self.centralwidget)
        self.medFilBtn.setGeometry(QtCore.QRect(500, 240, 131, 31))
        self.medFilBtn.setObjectName("medFilBtn")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(220, 60, 171, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(490, 60, 211, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(210, 90, 211, 201))
        self.label_3.setStyleSheet("background-color: rgb(220, 220, 220)")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(460, 90, 211, 201))
        self.label_4.setStyleSheet("background-color:rgb(234, 234, 234);\n"
"border-color: rgb(80, 80, 80);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.loadLabel1 = QtWidgets.QLabel(self.centralwidget)
        self.loadLabel1.setGeometry(QtCore.QRect(50, 160, 141, 21))
        self.loadLabel1.setText("")
        self.loadLabel1.setObjectName("loadLabel1")
        self.loadLabel2 = QtWidgets.QLabel(self.centralwidget)
        self.loadLabel2.setGeometry(QtCore.QRect(50, 230, 141, 21))
        self.loadLabel2.setText("")
        self.loadLabel2.setObjectName("loadLabel2")
        self.label_4.raise_()
        self.label_3.raise_()
        self.loadButton1.raise_()
        self.loadButton2.raise_()
        self.colorSepBtn.raise_()
        self.colorTranBtn.raise_()
        self.colorDetBtn.raise_()
        self.blendBtn.raise_()
        self.gaussBlur.raise_()
        self.bilFilBtn.raise_()
        self.medFilBtn.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.loadLabel1.raise_()
        self.loadLabel2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Button Function 1
        self.loadButton1.clicked.connect(self.loadImg1)
        self.loadButton2.clicked.connect(self.loadImg2)
        self.colorSepBtn.clicked.connect(self.colorSeperate)
        self.colorTranBtn.clicked.connect(self.colorTransformation)
        self.colorDetBtn.clicked.connect(self.colorDetection)
        self.blendBtn.clicked.connect(self.Blending)
        
        # Button Function 2
        self.gaussBlur.clicked.connect(self.gaussianBlur)
        self.bilFilBtn.clicked.connect(self.bilFilter)
        self.medFilBtn.clicked.connect(self.medianFilter)

        # Init Load Label
        if(not self.ImgPath1):
            self.loadLabel1.setText('No image loaded')
        if(not self.ImgPath2):
            self.loadLabel2.setText('No image loaded')

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.loadButton1.setText(_translate("MainWindow", "Load Image 1"))
        self.loadButton2.setText(_translate("MainWindow", "Load Image 2"))
        self.colorSepBtn.setText(_translate("MainWindow", "1.1 Color Seperation"))
        self.colorTranBtn.setText(_translate("MainWindow", "1.2 Color Transformation"))
        self.colorDetBtn.setText(_translate("MainWindow", "1.3 Color Detection"))
        self.blendBtn.setText(_translate("MainWindow", "1.4 Blending"))
        self.gaussBlur.setText(_translate("MainWindow", "2.1 Gaussian BLur"))
        self.bilFilBtn.setText(_translate("MainWindow", "2.2 Bilateral Filter"))
        self.medFilBtn.setText(_translate("MainWindow", "2.3 Median Filter"))
        self.label.setText(_translate("MainWindow", "1.Image Processing"))
        self.label_2.setText(_translate("MainWindow", "2.Image Smoothing"))

    def loadImg1(self):
        # self.ImgPath1 = './image1.jpg'
        fname = QFileDialog.getOpenFileName(caption='Open File', directory='./')
        self.ImgPath1 = fname[0]

        txt = fname[0].split("/")
        self.loadLabel1.setText(txt[-1])

    def loadImg2(self):
        # self.ImgPath1 = './image2.jpg'
        fname = QFileDialog.getOpenFileName(caption='Open File', directory='./')
        self.ImgPath2 = fname[0]

        txt = fname[0].split("/")
        self.loadLabel2.setText(txt[-1])

    def colorSeperate(self):
        image = cv2.imread(self.ImgPath1)
        if(image is None):
            print('load image failed\n')
            return

        # Split color
        (B,G,R) = cv2.split(image)

        # Show Split result
        # cv2.imshow("Blue", B)
        # cv2.imshow("Green", G)
        # cv2.imshow("Red", R)

        # print(image.shape)
        zeros = np.zeros(image.shape[:2],dtype = "uint8")

        cv2.imshow("Blue", cv2.merge([B, zeros, zeros]))
        cv2.imshow("Green", cv2.merge([zeros, G, zeros]))
        cv2.imshow("Red", cv2.merge([zeros, zeros, R]))

    def colorTransformation(self):
        image = cv2.imread(self.ImgPath1)
        # image = cv2.imread('image1.jpg')
        if(image is None):
            print('load image failed\n')
            return

        newimg = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        cv2.imshow("OpenCV Function", newimg)

        # Split color
        (B,G,R) = cv2.split(image)
        # k = 0
        # for i in range(0, B.shape[0]):
        #     for j in range(0, B.shape[1]):
        #         if B[i][j] == 255 and G[i][j] == 255 and R[i][j] == 255:
        #             print("B:{0} ".format(B[i][j]),end='')
        #             print("G:{0} ".format(G[i][j]),end='')
        #             print("R:{0} ".format(R[i][j]),end='')
        #             k += 1
        #         if k > 5:
        #             break
        #     if B[i][j] == 255:
        #         print('\n')
        #         k += 1
        #     if k > 5:
        #         break

        #  Add each matrix will follow the data type of each matrix assign to another matrix with same data type
        # Need to convert each matrix data type to bigger type
        # B,G,R matrix data type are uint8,[0, 255] add will overflow if do not convert dtype
        AvgImg = ((B.astype(int) + G.astype(int) + R.astype(int)).astype(int)/3).astype(np.uint8)
        print(AvgImg.dtype)
        cv2.imshow("Average weighted", AvgImg)

    def colorDetection(self):
        image = cv2.imread(self.ImgPath1)
        # image = cv2.imread('image1.jpg')
        if(image is None):
            print('load image failed\n')
            return

        hsv_img = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        print(hsv_img.shape)

        # filter green part
        lower_green = np.array([40,50,20])
        upper_green = np.array([80,255,255])
        green_mask = cv2.inRange(hsv_img, lower_green, upper_green)
        print(green_mask.shape)
        # cv2.imshow("Mask", mask)
        fil_green_img = cv2.bitwise_and(image, image, mask = green_mask)
        cv2.imshow("Green", fil_green_img)

        # filter white part
        lower_white = np.array([0,0,200])
        upper_white = np.array([180,20,255])
        white_mask = cv2.inRange(hsv_img, lower_white, upper_white)
        print(white_mask.shape)
        # cv2.imshow("Mask", mask)
        fil_white_img = cv2.bitwise_and(image, image, mask = white_mask)
        cv2.imshow("White", fil_white_img)

    def Blending(self):
        self.image1 = cv2.imread(self.ImgPath1)
        self.image2 = cv2.imread(self.ImgPath2)
        if(self.image1 is None or self.image2 is None):
            print('load image failed\n')
            return

        # Create trackbar
        cv2.namedWindow('Blend')
        cv2.createTrackbar('Blend', 'Blend', 0, 255, self.updateBlend)
        cv2.setTrackbarPos('Blend', 'Blend', 0)
        self.BlendImg = cv2.addWeighted(self.image1,1,self.image2,0,3)
        cv2.imshow('Blend', self.BlendImg)
        # cv2.imshow("Blended Image", blendImg)
        # while(True):
        #     cv2.imshow('Blend', self.BlendImg)
        #     if cv2.waitKey(1) == ord('q'):
        #         break

    def updateBlend(self,x):
        # image1 = cv2.imread(self.ImgPath1)
        # image2 = cv2.imread(self.ImgPath2)

        beta = cv2.getTrackbarPos('Blend', 'Blend')/255
        alpha = 1.0 - beta
        self.BlendImg = cv2.addWeighted(self.image1,alpha,self.image2,beta,3)
        cv2.imshow('Blend', self.BlendImg)

    def gaussianBlur(self):
        self.image1 = cv2.imread(self.ImgPath1)

        if(self.image1 is None):
            print('load image failed\n')
            return

        # Create trackbar
        cv2.namedWindow('Gaussian Blur')
        cv2.createTrackbar('magnitude', 'Gaussian Blur', 0, 10, self.updateGaussian)
        cv2.setTrackbarPos('magnitude', 'Gaussian Blur', 0)
        k = 0
        # print('k: {0}'.format(k))
        # Gaussian Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.GaussianBlur(self.image1, (2*k+1,2*k+1), 0)

        cv2.imshow('Gaussian Blur', self.blur)

    def updateGaussian(self,x):
        # self.image1 = cv2.imread(self.ImgPath1)

        if(self.image1 is None):
            print('load image failed\n')
            return
        
        # Get trackbar pos
        k = cv2.getTrackbarPos('magnitude', 'Gaussian Blur')
        # print('k: {0}'.format(k))
        # Gaussian Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.GaussianBlur(self.image1, (2*k+1,2*k+1), 0)

        cv2.imshow('Gaussian Blur', self.blur)

    def bilFilter(self):
        self.image1 = cv2.imread(self.ImgPath1)
        # image = cv2.imread('Dog_Strong.jpg')

        if(self.image1 is None):
            print('load image failed\n')
            return

        # Create trackbar
        cv2.namedWindow('Bilateral Filter')
        cv2.createTrackbar('magnitude', 'Bilateral Filter', 0, 10, self.updateBilateral)
        cv2.setTrackbarPos('magnitude', 'Bilateral Filter', 0)
        k = 0
        # print('k: {0}'.format(k))
        # Bilateral Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.bilateralFilter(self.image1, 2*k+1,90, 90)

        cv2.imshow('Bilateral Filter', self.blur)

    def updateBilateral(self,x):
        # self.image1 = cv2.imread(self.ImgPath1)
        # image = cv2.imread('Dog_Strong.jpg')

        if(self.image1 is None):
            print('load self.image1 failed\n')
            return
        
        # Get trackbar pos
        k = cv2.getTrackbarPos('magnitude', 'Bilateral Filter')
        # print('k: {0}'.format(k))
        # Bilateral Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.bilateralFilter(self.image1, 2*k+1,90, 90)

        cv2.imshow('Bilateral Filter', self.blur)

    def medianFilter(self):
        self.image1 = cv2.imread(self.ImgPath1)
        # image = cv2.imread('median2.jpg')

        if(self.image1 is None):
            print('load image failed\n')
            return

        # Create trackbar
        cv2.namedWindow('Median Filter')
        cv2.createTrackbar('magnitude', 'Median Filter', 0, 10, self.updateMedian)
        cv2.setTrackbarPos('magnitude', 'Median Filter', 0)
        k = 0
        # print('k: {0}'.format(k))
        # Median Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.medianBlur(self.image1, 2*k+1)

        cv2.imshow('Median Filter', self.blur)

    def updateMedian(self,x):
        # self.image1 = cv2.imread(self.ImgPath1)
        # image = cv2.imread('median2.jpg')

        if(self.image1 is None):
            print('load image failed\n')
            return
        
        # Get trackbar pos
        k = cv2.getTrackbarPos('magnitude', 'Median Filter')
        # print('k: {0}'.format(k))
        # Median Blur
        if k == 0:
            self.blur = self.image1
        else:
            self.blur = cv2.medianBlur(self.image1, 2*k+1)

        cv2.imshow('Median Filter', self.blur)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
